# default-build.yml
#
# Description: Defines a build phase for invoking build.sh/cmd
#
# Parameters:
#   agentOs: string
#       Used in templates to define variables which are OS specific. Typically from the set { Windows, Linux, macOS }
#   configuration: string
#       Debug or Release
#   buildArgs: string
#       Additional arguments to pass to the build.sh/cmd script.
#       Note: -ci is always passed
#   artifacts:
#      publish: boolean
#           Should artifacts be published
#      path: string
#           The file path to artifacts output
#      name: string
#           The name of the artifact container
#   codeSign: boolean
#       This build definition is enabled for code signing. (Only applies to Windows)

parameters:
  agentOs: 'Windows'
  buildArgs: ''
  configuration: 'Release'
  codeSign: false
  artifacts:
    publish: false
    path: 'artifacts/'

jobs:
- job: ${{ parameters.agentOs }}
  workspace:
    clean: all
  # Map friendly OS names to the right queue
  # See https://github.com/dotnet/arcade/blob/master/Documentation/ChoosingAMachinePool.md
  pool:
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'macOS')) }}:
      name: Hosted macOS
      vmImage: macOS-10.13
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'Linux')) }}:
      name: Hosted Ubuntu 1604
      vmImage: ubuntu-16.04
    ${{ if and(eq(parameters.poolName, ''), eq(parameters.agentOs, 'Windows')) }}:
      ${{ if eq(variables['System.TeamProject'], 'internal') }}:
        name: dotnet-internal-temp
      ${{ if ne(variables['System.TeamProject'], 'internal') }}:
        name: dotnet-external-temp
  variables:
    AgentOsName: ${{ parameters.agentOs }}
    DOTNET_HOME: $(Agent.WorkFolder)/.dotnet
    BuildScriptArgs: ${{ parameters.buildArgs }}
    BuildConfiguration: ${{ parameters.configuration }}
    ${{ if or(ne(parameters.codeSign, 'true'), ne(variables['System.TeamProject'], 'internal')) }}:
      _SignType:
    ${{ if and(eq(parameters.codeSign, 'true'), eq(variables['System.TeamProject'], 'internal')) }}:
      TeamName: AspNetCore
      _SignType: real
  steps:
  - checkout: self
    clean: true
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows'), eq(parameters.codeSign, 'true')) }}:
    - task: MicroBuildSigningPlugin@1
      displayName: Install MicroBuild Signing plugin
      condition: and(succeeded(), in(variables['_SignType'], 'test', 'real'))
      inputs:
        signType: $(_SignType)
        zipSources: false
        feedSource: https://dnceng.pkgs.visualstudio.com/_packaging/MicroBuildToolset/nuget/v3/index.json
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: .\build.cmd -ci /p:SignType=$(_SignType) /p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.cmd
  - ${{ if ne(parameters.agentOs, 'Windows') }}:
    - script: ./build.sh -ci -p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.sh
  - task: PublishTestResults@2
    displayName: Publish test results
    condition: always()
    inputs:
      testRunTitle: $(AgentOsName)-$(BuildConfiguration)
      testRunner: vstest
      testResultsFiles: 'artifacts/logs/**/*.trx'
      mergeTestResults: true
  - ${{ if eq(parameters.artifacts.publish, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: eq(variables['system.pullrequest.isfork'], false)
      inputs:
        pathtoPublish: ${{ parameters.artifacts.path }}
        ${{ if eq(parameters.artifacts.name, '') }}:
          artifactName: artifacts-$(AgentOsName)-$(BuildConfiguration)
        ${{ if ne(parameters.artifacts.name, '') }}:
          artifactName: ${{ parameters.artifacts.name }}
        artifactType: Container
        parallel: true
  - ${{ if and(eq(variables['System.TeamProject'], 'internal'), eq(parameters.agentOs, 'Windows')) }}:
    - task: MicroBuildCleanup@1
      displayName: Cleanup MicroBuild tasks
      condition: always()
