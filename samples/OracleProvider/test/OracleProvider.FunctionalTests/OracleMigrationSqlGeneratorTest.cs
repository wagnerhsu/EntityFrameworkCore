// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.EntityFrameworkCore.Oracle.Metadata.Internal;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Xunit;

// ReSharper disable InconsistentNaming
namespace Microsoft.EntityFrameworkCore
{
    public class OracleMigrationSqlGeneratorTest : MigrationSqlGeneratorTestBase
    {
        [Fact]
        public virtual void AddColumnOperation_with_computedSql()
        {
            Generate(
                new AddColumnOperation
                {
                    Table = "People",
                    Name = "FullName",
                    ClrType = typeof(string),
                    ComputedColumnSql = "FirstName || ' ' || LastName"
                });

            Assert.Equal(
                "ALTER TABLE \"People\" ADD \"FullName\" AS (FirstName || ' ' || LastName);",
                Sql);
        }

        public override void AddColumnOperation_with_computed_column_SQL()
        {
            base.AddColumnOperation_with_computed_column_SQL();

            Assert.Equal(
                "ALTER TABLE \"People\" ADD \"Birthday\" AS (CURRENT_TIMESTAMP);",
                Sql);
        }

        [Fact]
        public virtual void AddColumnOperation_identity()
        {
            Generate(
                new AddColumnOperation
                {
                    Table = "People",
                    Name = "Id",
                    ClrType = typeof(int),
                    ColumnType = "int",
                    DefaultValue = 0,
                    IsNullable = false,
                    [OracleAnnotationNames.ValueGenerationStrategy] =
                    OracleValueGenerationStrategy.IdentityColumn
                });

            Assert.Equal(
                "ALTER TABLE \"People\" ADD \"Id\" int GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL;",
                Sql);
        }

        public override void AddColumnOperation_without_column_type()
        {
            base.AddColumnOperation_without_column_type();

            Assert.Equal(
                "ALTER TABLE \"People\" ADD \"Alias\" NVARCHAR2(2000) NOT NULL;",
                Sql);
        }

        public override void AddColumnOperation_with_unicode_no_model()
        {
            base.AddColumnOperation_with_unicode_no_model();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" VARCHAR2(4000);",
                Sql);
        }

        public override void AddColumnOperation_with_maxLength()
        {
            base.AddColumnOperation_with_maxLength();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" NVARCHAR2(30);",
                Sql);
        }

        public override void AddColumnOperation_with_maxLength_overridden()
        {
            base.AddColumnOperation_with_maxLength_overridden();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" NVARCHAR2(32);",
                Sql);
        }

        public override void AddColumnOperation_with_maxLength_on_derived()
        {
            base.AddColumnOperation_with_maxLength_on_derived();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" NVARCHAR2(30);",
                Sql);
        }

        public override void AddColumnOperation_with_ansi()
        {
            base.AddColumnOperation_with_ansi();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" VARCHAR2(4000);",
                Sql);
        }

        public override void AddColumnOperation_with_unicode_overridden()
        {
            base.AddColumnOperation_with_unicode_overridden();

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"Name\" NVARCHAR2(2000);",
                Sql);
        }

        public override void AddColumnOperation_with_shared_column()
        {
            base.AddColumnOperation_with_shared_column();

            Assert.Equal(
                "ALTER TABLE \"Base\" ADD \"Foo\" NVARCHAR2(2000);",
                Sql);
        }

        [Fact]
        public virtual void AddColumnOperation_with_rowversion_overridden()
        {
            Generate(
                modelBuilder => modelBuilder.Entity("Person").Property<byte[]>("RowVersion"),
                new AddColumnOperation
                {
                    Table = "Person",
                    Name = "RowVersion",
                    ClrType = typeof(byte[]),
                    IsRowVersion = true,
                    IsNullable = true
                });

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"RowVersion\" RAW(8);",
                Sql);
        }

        [Fact]
        public virtual void AddColumnOperation_with_rowversion_no_model()
        {
            Generate(
                new AddColumnOperation
                {
                    Table = "Person",
                    Name = "RowVersion",
                    ClrType = typeof(byte[]),
                    IsRowVersion = true,
                    IsNullable = true
                });

            Assert.Equal(
                "ALTER TABLE \"Person\" ADD \"RowVersion\" RAW(8);",
                Sql);
        }

        [Fact]
        public virtual void AddPrimaryKeyOperation()
        {
            Generate(
                new AddPrimaryKeyOperation
                {
                    Table = "People",
                    Columns = new[] { "Id" }
                });

            Assert.Equal(
                "ALTER TABLE \"People\" ADD PRIMARY KEY (\"Id\");",
                Sql);
        }

        [Fact]
        public override void AlterColumnOperation()
        {
            base.AlterColumnOperation();

            Assert.Equal(
@"DECLARE
   v_Count INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_Count
  FROM ALL_TAB_IDENTITY_COLS T
  WHERE T.TABLE_NAME = N'People'
  AND T.COLUMN_NAME = 'LuckyNumber';
  IF v_Count > 0 THEN
    EXECUTE IMMEDIATE 'ALTER  TABLE ""People"" MODIFY ""LuckyNumber"" DROP IDENTITY';
  END IF;
END;
GO

ALTER TABLE ""People"" MODIFY ""LuckyNumber"" int DEFAULT 7 NOT NULL;",
                Sql);
        }

        [Fact]
        public override void AlterColumnOperation_without_column_type()
        {
            base.AlterColumnOperation_without_column_type();

            Assert.Equal(
@"DECLARE
   v_Count INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_Count
  FROM ALL_TAB_IDENTITY_COLS T
  WHERE T.TABLE_NAME = N'People'
  AND T.COLUMN_NAME = 'LuckyNumber';
  IF v_Count > 0 THEN
    EXECUTE IMMEDIATE 'ALTER  TABLE ""People"" MODIFY ""LuckyNumber"" DROP IDENTITY';
  END IF;
END;
GO

ALTER TABLE ""People"" MODIFY ""LuckyNumber"" DEFAULT NULL;
GO

ALTER TABLE ""People"" MODIFY ""LuckyNumber"" NUMBER(10) NOT NULL;",
           Sql);
        }

        [Fact]
        public virtual void AlterColumnOperation_computed()
        {
            Generate(
                new AlterColumnOperation
                {
                    Table = "People",
                    Name = "FullName",
                    ClrType = typeof(string),
                    ComputedColumnSql = "\"FirstName\" + ' ' + \"LastName\""
                });

            Assert.Equal(
@"ALTER TABLE ""People"" DROP COLUMN ""FullName"";
GO

ALTER TABLE ""People"" ADD ""FullName"" AS (""FirstName"" + ' ' + ""LastName"");",
                Sql);
        }

        [Fact]
        public virtual void AlterColumnOperation_add_identity()
        {
            Generate(
                modelBuilder => modelBuilder.HasAnnotation(CoreAnnotationNames.ProductVersionAnnotation, "1.1.0"),
                new AlterColumnOperation
                {
                    Table = "Person",
                    Name = "Id",
                    ClrType = typeof(int),
                    [OracleAnnotationNames.ValueGenerationStrategy] = OracleValueGenerationStrategy.IdentityColumn,
                    OldColumn = new ColumnOperation
                    {
                        ClrType = typeof(int)
                    }
                });

            Assert.Equal(
                @"ALTER TABLE ""Person"" MODIFY ""Id"" NUMBER(10) GENERATED BY DEFAULT ON NULL AS IDENTITY NOT NULL;",
                Sql);
        }

        [Fact]
        public virtual void AlterColumnOperation_remove_identity()
        {
            Generate(
                modelBuilder => modelBuilder.HasAnnotation(CoreAnnotationNames.ProductVersionAnnotation, "1.1.0"),
                new AlterColumnOperation
                {
                    Table = "Person",
                    Name = "Id",
                    ClrType = typeof(int),
                    OldColumn = new ColumnOperation
                    {
                        ClrType = typeof(int),
                        [OracleAnnotationNames.ValueGenerationStrategy] = OracleValueGenerationStrategy.IdentityColumn
                    }
                });

            Assert.Equal(
@"DECLARE
   v_Count INTEGER;
BEGIN
  SELECT COUNT(*) INTO v_Count
  FROM ALL_TAB_IDENTITY_COLS T
  WHERE T.TABLE_NAME = N'Person'
  AND T.COLUMN_NAME = 'Id';
  IF v_Count > 0 THEN
    EXECUTE IMMEDIATE 'ALTER  TABLE ""Person"" MODIFY ""Id"" DROP IDENTITY';
  END IF;
END;
GO

ALTER TABLE ""Person"" MODIFY ""Id"" NUMBER(10) NOT NULL;",
                Sql);
        }

        [Fact]
        public virtual void CreateUserOperation()
        {
            Generate(new OracleCreateUserOperation { UserName = "Northwind" });

            Assert.Equal(
                @"BEGIN
                             EXECUTE IMMEDIATE 'CREATE USER Northwind IDENTIFIED BY Northwind';
                             EXECUTE IMMEDIATE 'GRANT DBA TO Northwind';
                           END;",
                Sql);
        }

        public override void CreateIndexOperation_nonunique()
        {
            base.CreateIndexOperation_nonunique();

            Assert.Equal(
                "CREATE INDEX \"IX_People_Name\" ON \"People\" (\"Name\");",
                Sql);
        }

        public override void CreateIndexOperation_unique()
        {
            base.CreateIndexOperation_unique();

            Assert.Equal(
               "CREATE UNIQUE INDEX \"IX_People_Name\" ON \"People\" (\"FirstName\", \"LastName\");",
               Sql);
        }

        [Fact]
        public override void DropColumnOperation()
        {
            base.DropColumnOperation();

            Assert.Equal(
                @"ALTER TABLE ""People"" DROP COLUMN ""LuckyNumber"";",
                Sql);
        }

        [Fact]
        public virtual void DropUserOperation()
        {
            Generate(new OracleDropUserOperation { UserName = "Northwind" });

            Assert.Equal(
                @"BEGIN
                         FOR v_cur IN (SELECT sid, serial# FROM v$session WHERE username = 'NORTHWIND') LOOP
                            EXECUTE IMMEDIATE ('ALTER SYSTEM KILL SESSION ''' || v_cur.sid || ',' || v_cur.serial# || ''' IMMEDIATE');
                         END LOOP;
                         EXECUTE IMMEDIATE 'DROP USER Northwind CASCADE';
                       END;",
                Sql);
        }

        public override void DropIndexOperation()
        {
            base.DropIndexOperation();

            Assert.Equal("DROP INDEX \"IX_People_Name\";", Sql);
        }

        [Fact]
        public virtual void RenameColumnOperation()
        {
            Generate(
                new RenameColumnOperation
                {
                    Table = "People",
                    Schema = "SYSTEM",
                    Name = "Name",
                    NewName = "FullName"
                });

            Assert.Equal(
                "ALTER TABLE \"SYSTEM\".\"People\" RENAME COLUMN \"Name\" TO \"FullName\"",
                Sql);
        }

        [Fact]
        public virtual void RenameIndexOperation()
        {
            Generate(
                new RenameIndexOperation
                {
                    Table = "People",
                    Schema = "SYSTEM",
                    Name = "IX_People_Name",
                    NewName = "IX_People_FullName"
                });

            Assert.Equal(
                "ALTER INDEX \"IX_People_Name\" RENAME TO \"IX_People_FullName\"",
                Sql);
        }

        [Fact]
        public virtual void RenameSequenceOperation_legacy()
        {
            Generate(
                new RenameSequenceOperation
                {
                    Name = "EntityFrameworkHiLoSequence",
                    Schema = "SYSTEM",
                    NewName = "MySequence"
                });

            Assert.Equal(
                "RENAME \"EntityFrameworkHiLoSequence\" TO \"MySequence\"",
                Sql);
        }

        [Fact]
        public virtual void RenameSequenceOperation()
        {
            Generate(
                modelBuilder => modelBuilder.HasAnnotation(CoreAnnotationNames.ProductVersionAnnotation, "2.1.0"),
                new RenameSequenceOperation
                {
                    Name = "EntityFrameworkHiLoSequence",
                    Schema = "SYSTEM",
                    NewName = "MySequence",
                    NewSchema = "SYSTEM"
                });

            Assert.Equal(
                "RENAME \"EntityFrameworkHiLoSequence\" TO \"MySequence\"",
                Sql);
        }

        public override void RenameTableOperation_legacy()
        {
            base.RenameTableOperation_legacy();

            Assert.Equal(
                "ALTER TABLE \"People\" RENAME TO \"Person\"",
                Sql);
        }

        public override void RenameTableOperation()
        {
            base.RenameTableOperation();

            Assert.Equal(
                "ALTER TABLE \"People\" RENAME TO \"Person\"",
                Sql);
        }

        [Fact]
        public override void InsertDataOperation()
        {
            base.InsertDataOperation();

            Assert.Equal(
@"BEGIN
INSERT INTO ""People"" (""Id"", ""Full Name"")
VALUES (0, NULL);
INSERT INTO ""People"" (""Id"", ""Full Name"")
VALUES (1, N'Daenerys Targaryen');
INSERT INTO ""People"" (""Id"", ""Full Name"")
VALUES (2, N'John Snow');
INSERT INTO ""People"" (""Id"", ""Full Name"")
VALUES (3, N'Arya Stark');
INSERT INTO ""People"" (""Id"", ""Full Name"")
VALUES (4, N'Harry Strickland');
END;",
                Sql);
        }

        public OracleMigrationSqlGeneratorTest()
            : base(OracleTestHelpers.Instance)
        {
        }

        protected override string Sql
        {
            get => base.Sql;
            set => base.Sql = value.Trim();
        }
    }
}
